# https://pnpm.io/npmrc

# In the context of package managers like pnpm, "hoisting" refers to the practice of moving
# dependencies higher up in the directory structure. This is in contrast to keeping a completely
# isolated and flat structure where every package's dependencies are stored separately.
#
# In many monorepo setups, dependencies are hoisted to the root node_modules folder to avoid
# duplication and reduce disk space usage. However, this can sometimes lead to inconsistencies
# between local development and production environments, or other unforeseen issues due to
# conflicting versions. hoist = true

# Type definitions should not be hoisted to the root of the workspace, but should be installed
# alongside their respective packages. This is to ensure that the correct types are installed for
# each package, as well as to avoid issues with conflicting versions. hoist-pattern[]=*types*
# hoist-pattern[]=!@types/react

# Peer dependencies are a way for a package to specify that it expects a certain dependency to be
# installed by the parent project, but it doesn't want to dictate the exact version. They're often
# used for plugins or other extensions that need to work with a host library but want to remain
# flexible regarding the exact version of that library.
#
# This configures pnpm to automatically install peer dependencies alongside the package that
# requires them. This can make installations more straightforward, as you won't have to manually
# manage these dependencies. However, it can also lead to duplication and inconsistencies, so you
# may want to disable this if you prefer to manage peer dependencies yourself.
auto-install-peers = true

# The editor setting in a .npmrc or .pnpmrc file is used to configure which text editor is opened
# when certain commands that require user input are run.
#
# For example, in pnpm, when you run a command like pnpm config edit, the CLI will open the
# configuration file in the specified editor, so you can edit it directly.
editor = code --wait

# Defines the shell to use when running scripts. Defaults to "sh" on linux and "cmd" on windows. If
# you are using PowerShell on Windows, you can set this to "pwsh" to use PowerShell instead.
#script-shell = pwsh

# https://pnpm.io/npmrc#nodejs-settings
use-node-version=18.17.0
node-version=18.17.0
engine-strict=true
